"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const authController_1 = require("../controllers/authController");
const auth_1 = require("../middleware/auth");
const rateLimiter_1 = require("../middleware/rateLimiter");
const upload_1 = require("../middleware/upload");
const validation_1 = require("../middleware/validation");
const router = (0, express_1.Router)();
router.post('/register', rateLimiter_1.authLimiter, validation_1.validateRegister, authController_1.register);
router.post('/login', rateLimiter_1.authLimiter, validation_1.validateLogin, authController_1.login);
router.get('/verify-email', rateLimiter_1.authLimiter, authController_1.verifyEmail);
router.post('/resend-verification', rateLimiter_1.resendVerificationLimiter, validation_1.validateEmail, authController_1.resendVerificationEmail);
router.post('/forgot-password', rateLimiter_1.authLimiter, validation_1.validateEmail, authController_1.forgotPassword);
router.post('/reset-password', rateLimiter_1.authLimiter, validation_1.validateResetPassword, authController_1.resetPassword);
router.get('/me', auth_1.authenticate, authController_1.getMe);
router.put('/profile', auth_1.authenticate, validation_1.validateUpdateProfile, authController_1.updateProfile);
router.put('/password', auth_1.authenticate, validation_1.validateChangePassword, authController_1.changePassword);
router.post('/avatar', auth_1.authenticate, upload_1.uploadSingle, authController_1.uploadAvatar);
router.post('/admin-register', auth_1.authenticate, validation_1.validateRegister, authController_1.adminRegister);
router.get('/pending-users', auth_1.authenticate, authController_1.getPendingUsers);
router.post('/approve/:userId', auth_1.authenticate, authController_1.approveUser);
router.post('/reject/:userId', auth_1.authenticate, authController_1.rejectUser);
router.get('/users', auth_1.authenticate, authController_1.getAllUsers);
router.get('/users/stats', auth_1.authenticate, authController_1.getUserStats);
router.get('/users/:userId', auth_1.authenticate, authController_1.getUserById);
router.post('/users/create', auth_1.authenticate, validation_1.validateRegister, authController_1.createUser);
router.put('/users/:userId', auth_1.authenticate, authController_1.updateUser);
router.delete('/users/:userId', auth_1.authenticate, authController_1.deleteUser);
router.post('/users/:userId/activate', auth_1.authenticate, authController_1.activateUser);
router.post('/users/:userId/deactivate', auth_1.authenticate, authController_1.deactivateUser);
router.post('/users/:userId/reset-password', auth_1.authenticate, authController_1.resetUserPassword);
exports.default = router;
//# sourceMappingURL=auth.js.map